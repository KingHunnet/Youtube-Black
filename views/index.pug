mixin PolymerImport(el,sub)
    link(rel="import",href="/assets/"+el+"/"+(sub||el)+".html")

doctype html
html
    head
        title Online Polling App - RU Edition
        +PolymerImport("iron-icons","social-icons")
        +PolymerImport("iron-flex-layout","iron-flex-layout-classes")
        +PolymerImport("iron-icon")
        +PolymerImport("paper-button")
        +PolymerImport("paper-toolbar")
        +PolymerImport("paper-header-panel")
        +PolymerImport("highcharts-chart")
        script(src='/socket.io/socket.io.js')
        style: :clean-css
            html,body,head {margin:0;border:0;padding:0;font-family: Roboto}
    body.fullbleed
        style(is="custom-style",include="iron-flex iron-flex-alignment iron-positioning")
        style: :clean-css
            main {padding: 1em}
            #Name {text-align:center;width:100%}
            paper-button {background-color: #2196F3 !important;color: white}
        template#app(is="dom-bind")
            paper-header-panel
                paper-toolbar
                    h1 RU Polling
                    .flex
                    span [[users]]
                    iron-icon(icon="social:person")
                main.fit.layout-vertical.around-justified
                    h2#Name [[QuestionName]]
                    highcharts-chart#Chart(color-by-point,data="[[chartData]]",type="pie",title="[[_pretty(QuestionName)]]")
                    footer.Answer-Choices.layout.horizontal.center.around-justified
                        template(is="dom-repeat",items="[[choices]]")
                            paper-button(raised,on-tap="sendChoice") [[item]]
        script.
            var name = "#{question}"
        script: :uglify-js:babel
            var t = document.querySelector("#app")
            t._pretty = s => s.slice(0,7)
            t.io = io()
            t.users = 0
            t.QuestionName = name
            t.chartData = [["No Choice yet",100]]
            t.choices = ["Yes","No"]
            t.io.on("choice_update", e => {
                const d = e.choices
                t.chartData = Object.keys(d).map(el => [el, d[el]])
            })
            t.io.on("user", d => {
                t.users = d
            })
            t.io.emit("get_users")
            t.sendChoice = e => {t.io.emit("poll_choice",e.model.item)}
        //bower i -S PolymerElements/paper-header-panel